Description,Step,Type,Table,Out Col,In Col,Func
Rename purpose,step_0,rename,airportCBXTrips,,,{'tripPurpose': 'tripPurposeDestination'}
Rename purpose,step_0,rename,airportSANTrips,,,{'tripPurpose': 'tripPurposeDestination'}
Define purpose (NA),step_0,column,internalExternalTrips,tripPurposeDestination,,Not Applicable
Define purpose (NA),step_0,column,externalExternalTrips,tripPurposeDestination,,Not Applicable
Rename purpose,step_0,rename,externalInternalTrips,,,{'tripPurpose': 'tripPurposeDestination'}
Rename purpose,step_0,column,truckTrips,tripPurposeDestination,,Not Applicable
Rename purpose,step_0,rename,visitorTrips,,,{'tripPurpose': 'tripPurposeDestination'}
Rename default table column to model,step_1,rename,trips,,,{'table': 'model'}
Clean model values,step_1,raw,trips,,,"trips['model'] = trips['model'].str.replace('Trips', '')"
Bin continuous age data,step_1,bin,persons,age_bin,age,"[0,18,30,45,60, 100]"
Map TOD values,step_1,replace,trips,departTimeFiveTod,departTimeFiveTod,"{1: 'EA', 2: 'AM', 3: 'MD', 4: 'PM', 5: 'EV'}"
Aggregate truck mode values,step_1,replace,trips,tripMode,tripMode,"{'Light Heavy Duty Truck': 'Truck', 'Medium Heavy Duty Truck': 'Truck', 'Heavy Heavy Duty Truck': 'Truck'}"
Aggregate transit mode values,step_1,raw,trips,,,"trips['tripMode'] = np.select([(trips['tripMode'].str.contains('to Transit'))], ['Transit'], default=trips['tripMode'])"
Add time period to highway network,step_1,replace,highway_load,timePeriod,table,"{""hwyload_EA"": ""EA"",""hwyload_AM"": ""AM"",""hwyload_MD"": ""MD"",""hwyload_PM"": ""PM"",""hwyload_EV"": ""EV""}"
Trip VMT,step_1,raw,trips,,,trips['vmt'] = (trips['distanceDrive'].fillna(0) + trips['distanceDriveTransit'].fillna(0))*trips['weightTrip']
Trip Cost (weighted),step_1,column,trips,cost,,costTotal*weightTrip
Trip Distance (weighted),step_1,column,trips,distance,,distanceTotal*weightTrip
Trip Time (weighted),step_1,column,trips,time,,timeTotal*weightTrip
Total A-B Auto flow,step_1,column,highway_load,AB_Flow_Auto,,AB_Flow_SOV_NTPL+AB_Flow_SOV_TPL+AB_Flow_SR2L+AB_Flow_SR3L+AB_Flow_SOV_NTPM+AB_Flow_SOV_TPM+AB_Flow_SR2M+AB_Flow_SR3M+AB_Flow_SOV_NTPH+AB_Flow_SOV_TPH+AB_Flow_SR2H+AB_Flow_SR3H
Total A-B Auto flow,step_1,column,highway_load,BA_Flow_Auto,,BA_Flow_SOV_NTPL+BA_Flow_SOV_TPL+BA_Flow_SR2L+BA_Flow_SR3L+BA_Flow_SOV_NTPM+BA_Flow_SOV_TPM+BA_Flow_SR2M+BA_Flow_SR3M+BA_Flow_SOV_NTPH+BA_Flow_SOV_TPH+BA_Flow_SR2H+BA_Flow_SR3H
Total A-B Truck flow,step_1,column,highway_load,AB_Flow_Truck,,AB_Flow_lhd+AB_Flow_mhd+AB_Flow_hhd
Total B-A Truck flow,step_1,column,highway_load,BA_Flow_Truck,,BA_Flow_lhd+BA_Flow_mhd+BA_Flow_hhd
Total A-B flow,step_1,column,highway_load,AB_Flow,,AB_Flow_Auto+AB_Flow_Truck
Total B-A flow,step_1,column,highway_load,BA_flow,,BA_Flow_Auto+BA_Flow_Truck
Fill any null values in highway load,step_1,raw,highway_load,,,highway_load = highway_load.fillna(0)
Restructure highway network by TOD,step_1,raw,,,,"highway_network = pd.wide_to_long(df=hwyTcad,stubnames=[""ABTM"",""BATM"",""ABTX"",""BATX"",""ABPRELOAD"",""BAPRELOAD""],i=[""ID"",""Length"",""IFC""],j=""timePeriod"",sep=""_"",suffix=""\w+"").reset_index()"
Fill any null values in highway network,step_1,raw,,,,highway_network = highway_network.fillna(0)
Map IFC values,step_1,replace,highway_network,ifc_desc,IFC,"{1:""Freeway"",2:""Prime Arterial"",3:""Major Arterial"",4:""Collector"",5:""Local Collector"",6:""Rural Coolector"",7:""Local Road"",8:""Freeway Connector Ramp"",9:""Local Ramp"",10:""Zone Connector""}"
Map transit mode values,step_1,replace,transit_onoff,MODE,MODE,"{'PREM': 'Premium Transit', 'BUS': 'Local Bus', 'ALLPEN': 'Local Bus and Premium Transit'}"
Map transit access mode values,step_1,replace,transit_onoff,ACCESSMODE,ACCESSMODE,"{'KNR': 'Kiss and Ride to Transit', 'PNR': 'Park and Ride to Transit', 'WLK': 'Walk to Transit'}"
Auto VMT,step_2,column,network,vmt_auto,,(AB_Flow_Auto+BA_Flow_Auto) * Length
Truck VMT,step_2,column,network,vmt_truck,,(AB_Flow_Truck+BA_Flow_Truck) * Length
Bus VMT,step_2,column,network,vmt_bus,,(ABPRELOAD+BAPRELOAD) * Length
Total VMT,step_2,column,network,vmt_total,,vmt_auto+vmt_truck+vmt_bus
Auto VHT,step_2,column,network,vht_auto,,(AB_Flow_Auto * AB_Time) + (BA_Flow_Auto * BA_Time)
Truck VHT,step_2,column,network,vht_truck,,(AB_Flow_Truck * AB_Time) + (BA_Flow_Truck * BA_Time)
Bus VHT,step_2,column,network,vht_bus,,(ABPRELOAD * AB_Time) + (BAPRELOAD * BA_Time)
Total VHT,step_2,column,network,vht_total,,vht_auto+vht_truck+vht_bus
Auto VHD,step_2,column,network,vhd_auto,,(AB_Flow_Auto * (AB_Time - ABTM - ABTX) / 60.0) +  (BA_Flow_Auto * (BA_Time - BATM - BATX) / 60.0)
Truck VHD,step_2,column,network,vhd_truck,,(AB_Flow_Truck * (AB_Time - ABTM - ABTX) / 60.0) +  (BA_Flow_Truck * (BA_Time - BATM - BATX) / 60.0)
Bus VHD,step_2,column,network,vhd_bus,,(ABPRELOAD * (AB_Time - ABTM - ABTX) / 60.0) + (BAPRELOAD * (BA_Time - BATM - BATX) / 60.0)
Lower bound VHD to 0,step_2,raw,,,,"network[['vhd_auto','vhd_truck','vhd_bus']] = network[['vhd_auto','vhd_truck','vhd_bus']].clip(0)"
Total VHD,step_2,column,network,vhd_total,,vhd_auto+vhd_truck+vhd_bus
,,,,,,
Trip OD raw distance,step_2,skim,trips,od_distance,"originTAZ,destinationTAZ",traffic_skims_MD['MD_SOV_TR_H_DIST']
,,,,,,
Summary post-processing example,step_3,raw,,,,trips_summary = trips_summary.T
